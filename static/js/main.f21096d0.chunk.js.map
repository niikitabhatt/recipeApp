{"version":3,"sources":["Component/Temp.js","App.js","serviceWorker.js","index.js"],"names":["Temp","title","calories","image","ingredients","map","ingredient","text","src","arg","App","useState","receipes","setReceipe","search","setSearch","query","setQuery","useEffect","console","log","getReceipe","axios","get","then","response","data","hits","catch","e","className","type","value","onChange","target","onClick","preventDefault","receipe","index","key","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2QAoBeA,G,MAlBJ,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,YAE/B,OAEI,6BACA,4BAAKH,GACP,4BAEEG,EAAYC,KAAI,SAAAC,GAAU,OAAI,gCAAMA,EAAWC,UAG/C,gCAAML,GACN,yBAAKM,IAAKL,EAAOM,IAAI,QC6CdC,EArDH,WACV,IADe,EAGgBC,mBAAS,IAHzB,mBAGRC,EAHQ,KAGEC,EAHF,OAIeF,mBAAS,IAJxB,mBAIRG,EAJQ,KAICC,EAJD,OAKWJ,mBAAS,WALpB,mBAKRK,EALQ,KAKDC,EALC,KAOfC,qBAAU,WACRC,QAAQC,IAAI,cACZC,MACC,CAACL,IAEN,IAAMK,EAAY,WAChBC,IAAMC,IAAN,0CAA6CP,EAA7C,mBAZa,WAYb,oBAXc,qCAYbQ,MAAK,SAAAC,GACJN,QAAQC,IAAI,yBAA0BK,GACtCN,QAAQC,IAAI,+BACZP,EAAWY,EAASC,KAAKC,MACzBR,QAAQC,IAAI,6BAA+BR,MAG5CgB,OAAM,SAAAC,GAAC,OAAIV,QAAQC,IAAIS,OAU1B,OACA,yBAAKC,UAAU,OACf,0BAAMA,UAAU,eAChB,2BAAOA,UAAU,eAAeC,KAAK,OAAOC,MAAOlB,EAAQmB,SAXjC,SAACJ,GAC3Bd,EAAUc,EAAEK,OAAOF,UAWnB,4BAAQF,UAAU,gBAAgBC,KAAK,SAASI,QATzB,SAACN,GACtBA,EAAEO,iBACJnB,EAASH,GACTC,EAAU,MAMV,WAEA,yBAAKe,UAAU,kBAEblB,EAASP,KAAI,SAACgC,EAASC,GAAV,OACb,kBAAC,EAAD,CAAMC,IAAKD,EAAOrC,MAAOoC,EAAQG,OAAOC,MACxCrC,YAAaiC,EAAQG,OAAOpC,YAC5BF,SAAUmC,EAAQG,OAAOtC,SACzBC,MAAOkC,EAAQG,OAAOrC,cCrCJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.f21096d0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Temp=({title,calories,image, ingredients})=> {\r\n   \r\n    return (\r\n        \r\n        <div>\r\n        <h1>{title}</h1>\r\n      <ol>\r\n      {\r\n        ingredients.map(ingredient => <li> {ingredient.text}</li>)\r\n       }\r\n       </ol>\r\n        <h2> {calories}</h2>\r\n        <img src={image} arg=''></img>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Temp\r\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios'\nimport './App.css';\n\nimport Temp from './Component/Temp';\n\nconst App = ()=> {\n  const APP_ID='8e7d7cc2'\n  const APP_KEY='6a4e7c08d7146387f3e3b481f85a9b16'\n  const [receipes, setReceipe] = useState([])\n  const [search , setSearch] =  useState('')\n  const [query, setQuery] = useState('chicken')\n\n  useEffect(() => {\n    console.log(\"use effect\")\n    getReceipe()\n  }, [query]);\n\nconst getReceipe= ()=>  {\n  axios.get(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n  .then(response => {\n    console.log('get receipe by promise', response)\n    console.log(\"use state variable receipes\")\n    setReceipe(response.data.hits)\n    console.log(\"after use state receipe = \" , receipes)\n    \n  })\n  .catch(e => console.log(e))\n}\nconst changeInputHnadler =(e)=>{\nsetSearch(e.target.value)\n}\nconst onSubmitHandler= (e) => {\n  e.preventDefault()\nsetQuery(search)\nsetSearch('')\n}\nreturn (\n<div className='App'> \n<form className=\"search-form\" >\n<input className=\"search-input\" type=\"text\" value={search} onChange={changeInputHnadler}></input>\n<button className=\"search-button\" type=\"submit\" onClick={onSubmitHandler} >Submit</button>\n</form>\n<div className=\"recipe-content\">\n{\n  receipes.map((receipe, index) => (\n  <Temp key={index} title={receipe.recipe.label}\n  ingredients={receipe.recipe.ingredients}\n  calories={receipe.recipe.calories}\n  image={receipe.recipe.image}></Temp>\n  )\n  )\n}\n</div>\n\n</div>\n);\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}